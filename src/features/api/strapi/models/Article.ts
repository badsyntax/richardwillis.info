/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Comment,
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
} from './';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    slug: string;
    /**
     * 
     * @type {object}
     * @memberof Article
     */
    category?: object;
    /**
     * 
     * @type {object}
     * @memberof Article
     */
    image: object;
    /**
     * 
     * @type {object}
     * @memberof Article
     */
    author?: object;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    excerpt?: string;
    /**
     * 
     * @type {Date}
     * @memberof Article
     */
    publishDate: Date;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof Article
     */
    comments?: Array<Comment>;
    /**
     * 
     * @type {Date}
     * @memberof Article
     */
    publishedAt?: Date;
}

export function ArticleFromJSON(json: any): Article {
    return ArticleFromJSONTyped(json, false);
}

export function ArticleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Article {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'content': json['content'],
        'slug': json['slug'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'image': json['image'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'excerpt': !exists(json, 'excerpt') ? undefined : json['excerpt'],
        'publishDate': (new Date(json['publish_date'])),
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'publishedAt': !exists(json, 'published_at') ? undefined : (new Date(json['published_at'])),
    };
}

export function ArticleToJSON(value?: Article | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'content': value.content,
        'slug': value.slug,
        'category': value.category,
        'image': value.image,
        'author': value.author,
        'excerpt': value.excerpt,
        'publish_date': (value.publishDate.toISOString().substr(0,10)),
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CommentToJSON)),
        'published_at': value.publishedAt === undefined ? undefined : (value.publishedAt.toISOString()),
    };
}


