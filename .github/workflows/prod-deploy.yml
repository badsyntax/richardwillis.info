name: Prod deploy
on:
  push:
#   release:
#     types: [published]

jobs:
  publish-docker-images:
    name: Publish docker images
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: registry.docker-box.richardwillis.info
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: registry.docker-box.richardwillis.info/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            APP_VERSION=${{ github.event.release.tag_name }}
            STRAPI_ENDPOINT=${{ secrets.STRAPI_ENDPOINT }}

      # - name: Build and push Staticman docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./staticman
      #     file: ./staticman/Dockerfile
      #     push: true
      #     platforms: linux/amd64
      #     tags: registry.docker-box.richardwillis.info/${{ github.repository_owner }}/richardwillis-staticman:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  publish-s3:
    name: Publish static assets to S3
    needs: [publish-docker-images]
    runs-on: ubuntu-20.04
    steps:
      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: registry.docker-box.richardwillis.info
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Copy static files from docker image
        run: |
          docker pull registry.docker-box.richardwillis.info/${{ github.repository }}:latest
          docker run -i --name helper registry.docker-box.richardwillis.info/${{ github.repository }}:latest true
          docker cp helper:/app/.next .
          docker rm helper

      - name: Sync static assets to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --cache-control public,max-age=31536000,immutable --size-only
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          SOURCE_DIR: '.next/static'
          DEST_DIR: '_next/static'

  # deploy:
  #   name: Deploy app
  #   needs: [publish-s3]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Save deploy start time
  #       id: deploy_start
  #       run: |
  #         start=$(date +%s%N | cut -b1-13)
  #         echo ::set-output name=start_time::$start
  #     - name: Create GitHub deployment
  #       id: create_deployment
  #       uses: octokit/request-action@v2.x
  #       with:
  #         route: POST /repos/:repository/deployments
  #         repository: ${{ github.repository }}
  #         ref: ${{ github.event.release.tag_name }}
  #         environment: production
  #         required_contexts: '[]'
  #         production_environment: true
  #         auto_merge: false
  #       env:
  #         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  #     - name: Set GitHub deployment status to in progress
  #       id: start_deployment
  #       uses: octokit/request-action@v2.x
  #       with:
  #         route: POST /repos/:repository/deployments/:deployment/statuses
  #         repository: ${{ github.repository }}
  #         deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
  #         environment: production
  #         environment_url: https://richardwillis.info
  #         log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #         state: in_progress
  #         mediaType: '{"previews": ["flash", "ant-man"]}'
  #       env:
  #         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  #     - name: Create deploy repo
  #       id: deploy_repo
  #       run: |
  #         echo "FROM $IMAGE_URL" > Dockerfile
  #         git init
  #         git config user.email "willis.rh@gmail.com"
  #         git config user.name "Richard Willis"
  #         git add Dockerfile
  #         git commit -m "Add Dockerfile"
  #         commit=$(git rev-parse HEAD 2>/dev/null || true)
  #         echo ::set-output name=commit_sha::$commit
  #       env:
  #         IMAGE_URL: registry.docker-box.richardwillis.info/${{ github.repository_owner }}/richardwillis:latest
  #     - name: Push to dokku
  #       uses: dokku/github-action@master
  #       with:
  #         command: deploy
  #         git_remote_url: ${{ secrets.GIT_REMOTE_URL }}
  #         ssh_private_key: ${{ secrets.DOKKU_SSH_PRIVATE_KEY }}
  #         git_push_flags: '--force'
  #         ci_commit: ${{ steps.deploy_repo.outputs.commit_sha }}
  #     - name: Set Grafana deployment
  #       run: |
  #         end=$(date +%s%N | cut -b1-13)
  #         curl -X POST https://grafana.$DOKKU_HOST/api/annotations \
  #           -H "Content-Type: application/json" \
  #           -H "Authorization: Bearer $AUTH_TOKEN" \
  #           --data @- << EOF
  #           {
  #             "dashboardId":2,
  #             "time":$TIME_START,
  #             "timeEnd":$end,
  #             "tags":["deployment","production"],
  #             "text":"App version $APP_VERSION deployed to <a href=\"https://richardwillis.info\">https://richardwillis.info</a>"
  #           }
  #         EOF
  #       env:
  #         AUTH_TOKEN: '${{ secrets.GRAFANA_AUTH_TOKEN }}'
  #         DOKKU_HOST: '${{ secrets.DOKKU_HOST }}'
  #         TIME_START: ${{ steps.deploy_start.outputs.start_time }}
  #         APP_VERSION: '${{ github.event.release.tag_name }}'
  #     - name: Set deployment status to success
  #       id: successful_deployment
  #       uses: octokit/request-action@v2.x
  #       with:
  #         route: POST /repos/:repository/deployments/:deployment/statuses
  #         repository: ${{ github.repository }}
  #         deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
  #         environment: production
  #         environment_url: https://richardwillis.info
  #         log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #         mediaType: '{"previews": ["ant-man"]}'
  #         state: success
  #       env:
  #         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  #     - name: Set deployment status to failure
  #       id: failed_deployment
  #       uses: octokit/request-action@v2.x
  #       if: failure()
  #       with:
  #         route: POST /repos/:repository/deployments/:deployment/statuses
  #         repository: ${{ github.repository }}
  #         deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
  #         environment: production
  #         environment_url: https://richardwillis.info
  #         log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #         mediaType: '{"previews": ["ant-man"]}'
  #         state: failure
  #       env:
  #         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
