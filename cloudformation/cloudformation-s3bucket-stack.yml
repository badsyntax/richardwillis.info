AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFront distribution with an S3 origin'

Parameters:
  StackName:
    Type: String
    Description: Used for creating resource names
  S3BucketName:
    Type: String
    Description: Name of S3 bucket to create (ending with the region name)
  S3AllowedOrigins:
    Type: CommaDelimitedList
    Description: A list of allowed domains to request resources from S3
  CloudFrontRootHosts:
    Type: CommaDelimitedList
    Description: A list of hosts assigned to the Root CloudFront distribution
  CloudFrontPreviewHosts:
    Type: CommaDelimitedList
    Description: A list of hosts assigned to the Preview CloudFront distribution
  CertificateARN:
    Type: String
    Description: ARN of the certificate for the root and preview domains
  LambdaVersion:
    Type: String
    Description: A unique identifier to allow multiple deployments of the CloudFormation stack
  CloudFrontDefaultRootObject:
    Type: String
    Default: 'index.html'
    Description: The cloudfront default root object. Typically either index.html or index

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: 'Delete'
    Metadata:
      Comment: 'Bucket to store all assets to be served over the CDN'
    Properties:
      AccessControl: 'Private'
      BucketName: !Ref S3BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: !Ref S3AllowedOrigins
            AllowedMethods:
              - GET
              - HEAD
            AllowedHeaders:
              - '*'

  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Metadata:
      Comment: 'Bucket policy to allow CloudFront & Public access'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: 'Allow'
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketName}/*'

  CFStaticCachePolicy:
    Type: 'AWS::CloudFront::CachePolicy'
    Metadata:
      Comment: 'Cache policy for the cache path'
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 0
        Name: !Sub '${StackName}-cf-static-cache-policy'
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          CookiesConfig:
            CookieBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
              - Origin

  CFDistributionRoot:
    Type: 'AWS::CloudFront::Distribution'
    Metadata:
      Comment: 'A Root CloudFront distribution with an S3 origin'
    Properties:
      DistributionConfig:
        Comment: 'CDN for all root static assets'
        Aliases: !Ref CloudFrontRootHosts
        DefaultRootObject: !Ref CloudFrontDefaultRootObject
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: false
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: !Sub 's3-origin-${S3Bucket}'
            OriginPath: '/root'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CFOriginAccessIdentity}'
        DefaultCacheBehavior:
          CachePolicyId: !Ref CFStaticCachePolicy
          AllowedMethods:
            - 'HEAD'
            - 'GET'
          CachedMethods:
            - 'HEAD'
            - 'GET'
          Compress: true
          TargetOriginId: !Sub 's3-origin-${S3Bucket}'
          ViewerProtocolPolicy: 'redirect-to-https'
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateARN
          MinimumProtocolVersion: 'TLSv1.2_2021'
          SslSupportMethod: 'sni-only'

  CFDistributionPreview:
    Type: 'AWS::CloudFront::Distribution'
    Metadata:
      Comment: 'A Preview CloudFront distribution with an S3 origin'
    Properties:
      DistributionConfig:
        Comment: 'CDN for all preview static assets'
        Aliases: !Ref CloudFrontPreviewHosts
        DefaultRootObject: !Ref CloudFrontDefaultRootObject
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: false
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: !Sub 's3-origin-${S3Bucket}'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CFOriginAccessIdentity}'
        DefaultCacheBehavior:
          CachePolicyId: !Ref CFStaticCachePolicy
          AllowedMethods:
            - 'HEAD'
            - 'GET'
          CachedMethods:
            - 'HEAD'
            - 'GET'
          Compress: true
          TargetOriginId: !Sub 's3-origin-${S3Bucket}'
          ViewerProtocolPolicy: 'redirect-to-https'
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !GetAtt CFLambdaVersionPreviewUrl.FunctionArn
              IncludeBody: false
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateARN
          MinimumProtocolVersion: 'TLSv1.2_2021'
          SslSupportMethod: 'sni-only'

  CFOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Metadata:
      Comment: 'Access S3 bucket content only through CloudFront'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Access S3 bucket content only through CloudFront'

  CFLambdaPreviewUrl:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt CFLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Code:
        ZipFile: !Sub
          - |
            function getBranchName(request) {
              const hostItem = request.headers.host.find(item => item.key === 'Host');
              const [branchName, preview] = hostItem.value.split('.');
              if (preview !== 'preview') {
                return undefined;
              }
              return branchName;
            }

            exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const branchName = getBranchName(request);
              if (branchName) {
                const path = request.uri === '/' ? ('/' + '${RootObject}') : request.uri;
                request.uri = '/preview/' + branchName + path;
              }
              callback(null, request);
            };
          - { RootObject: !Ref CloudFrontDefaultRootObject }

  CFLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CFLambdaVersionPreviewUrl:
    Type: Custom::LatestLambdaVersion
    Properties:
      ServiceToken: !GetAtt PublishLambdaVersion.Arn
      FunctionName: !Ref CFLambdaPreviewUrl
      Version: !Ref LambdaVersion

  PublishLambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt PublishLambdaVersionRole.Arn
      Code:
        ZipFile: |
          const {Lambda} = require('aws-sdk')
          const {send, SUCCESS, FAILED} = require('cfn-response')
          const lambda = new Lambda()
          exports.handler = (event, context) => {
            const {RequestType, ResourceProperties: {FunctionName}} = event
            if (RequestType == 'Delete') return send(event, context, SUCCESS)
            lambda.publishVersion({FunctionName}, (err, {FunctionArn}) => {
              err
                ? send(event, context, FAILED, err)
                : send(event, context, SUCCESS, {FunctionArn})
            })
          }

  PublishLambdaVersionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:PublishVersion
                Resource: '*'

Outputs:
  S3BucketName:
    Description: 'Bucket name'
    Value: !Ref S3Bucket
  CFDistributionRootId:
    Description: 'Id of the Root CloudFront distribution'
    Value: !Ref CFDistributionRoot
  CFDistributionRootDomainName:
    Description: 'Domain of the Root CloudFront distribution'
    Value: !GetAtt CFDistributionRoot.DomainName
  CFDistributionPreviewId:
    Description: 'Id of the Preview CloudFront distribution'
    Value: !Ref CFDistributionPreview
  CFDistributionPreviewDomainName:
    Description: 'Domain of the Preview CloudFront distribution'
    Value: !GetAtt CFDistributionPreview.DomainName
